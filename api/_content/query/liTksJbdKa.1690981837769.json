{"_path":"/en/blog/articles/stringa-palindroma-cpp","_dir":"articles","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"Check if a string is a palindrome in C++","description":"Given a string, we will check whether it is a palindrome or not.","img":"/images/articles/stringa-palindroma.webp","alt":"palindrome","author":"Giancarmelo","keywords":"palindrome string, palindrome string in c++, palindrome string in cpp, c++ palindrome string, cpp palindrome string","cAt":"2021-01-17T19:27:10.934Z","uAt":"2021-01-17T19:27:10.934Z","categories":["cpp","tutorial"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"check-if-a-string-is-a-palindrome-in-c"},"children":[{"type":"text","value":"Check if a string is a palindrome in C++"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One of the most common exercises when learning to program with strings is to check whether a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"string"}]},{"type":"text","value":" is a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"palindrome"}]},{"type":"text","value":" or not. First of all, let's define what a palindrome is: it is a string that reads the same backward as forward. For a more accurate description, I recommend "},{"type":"element","tag":"a","props":{"href":"https://www.treccani.it/vocabolario/palindromo/","rel":["nofollow"],"title":"palindrome definition"},"children":[{"type":"text","value":"Palindroma Definition"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now that we know what a palindrome is, all we have to do is turn our idea into code."}]},{"type":"element","tag":"h3","props":{"id":"given-an-input-string-check-if-its-a-palindrome"},"children":[{"type":"text","value":"Given an input string, check if it's a palindrome."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First, let's define a function that returns true or false depending on whether the string is a palindrome or not."}]},{"type":"element","tag":"code","props":{"className":["language-cpp"],"code":"bool isPalindroma(string str){\n  for(int i = 0, _i = str.length()-1; i< str.length() / 2; i++){\n    if(str[i] != str[_i--])\n      return false;\n  }\n  return true;\n}\n","language":"cpp","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"bool isPalindroma(string str){\n  for(int i = 0, _i = str.length()-1; i< str.length() / 2; i++){\n    if(str[i] != str[_i--])\n      return false;\n  }\n  return true;\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The reasoning here is very simple. I iterate through the string from index "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" to index "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"str.length() / 2"}]},{"type":"text","value":", which is the middle of the string, and ask a simple question: is the element at position i "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"different"}]},{"type":"text","value":" from the element at position str.length() - 1 - i? If this condition is true, the string is not a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"palindrome"}]},{"type":"text","value":", so I return "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"false"}]},{"type":"text","value":". Otherwise, I continue with the loop until I reach the middle of the string. If the loop completes, the string is a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"palindrome"}]},{"type":"text","value":", so I return true."}]},{"type":"element","tag":"img","props":{"w40":"","src":"https://media.giphy.com/media/3oKIPc9VZj4ylzjcys/giphy.gif","alt":"frattale"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now all we have to do is use it in our main function."}]},{"type":"element","tag":"code","props":{"className":["language-cpp"],"code":"int main(){\n\n  string str = \"\";\n  cin >> str;\n\n  string isP = isPalindrome(str) ? \"is a palindrome \" : \"is not a palindrome \";\n  cout << str << isP;\n  return 0; \n}\n","language":"cpp","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"int main(){\n\n  string str = \"\";\n  cin >> str;\n\n  string isP = isPalindrome(str) ? \"is a palindrome \" : \"is not a palindrome \";\n  cout << str << isP;\n  return 0; \n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"small","props":{},"children":[{"type":"text","value":"P.S. Don t forget to include string, iostream, and the std namespace at the beginning of the file."}]}]},{"type":"element","tag":"code","props":{"className":["language-cpp"],"code":"#include < iostream >\n#include < string >\n","language":"cpp","meta":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#include < iostream >\n#include < string >\n"}]}]}]},{"type":"element","tag":"img","props":{"w40":"","src":"https://media.giphy.com/media/STfy5ufhXc3ukuioLT/giphy.gif","alt":"gg"},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"check-if-a-string-is-a-palindrome-in-c","depth":2,"text":"Check if a string is a palindrome in C++","children":[{"id":"given-an-input-string-check-if-its-a-palindrome","depth":3,"text":"Given an input string, check if it's a palindrome."}]}]}},"_type":"markdown","_id":"content:en:blog:articles:stringa-palindroma-cpp.md","_source":"content","_file":"en/blog/articles/stringa-palindroma-cpp.md","_extension":"md"}